import logging
import asyncio
import json
import httpx
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# üîß –ù–ê–°–¢–†–û–ô–ö–ò
TOKEN = "7827265617:AAEQvEsQE-v9gU0IpZZo7eUnUzjeqwawRM0"
ADMIN_USERNAME = "alice_alekseeevna"
EMPLOYEES_FILE = "employees.json"

# üîß –õ–û–ì–ò
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üì¶ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
def load_employees():
    with open(EMPLOYEES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_employees(employees):
    with open(EMPLOYEES_FILE, "w", encoding="utf-8") as f:
        json.dump(employees, f, ensure_ascii=False, indent=2)

# ‚úÖ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    employees = load_employees()
    for emp in employees:
        if emp["username"] == user.username:
            emp["chat_id"] = user.id
            save_employees(employees)
            await update.message.reply_text("–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ñ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π.")
            return
    await update.message.reply_text("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")

# üëá –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    status, username, point = query.data.split("|")
    symbol = "‚úÖ" if status == "yes" else "‚ùå"
    text = f"@{username} ({point}) ‚Äî –≤—ã—Ö–æ–¥–∏—Ç {symbol}"

    employees = load_employees()
    for emp in employees:
        if emp["username"] == ADMIN_USERNAME and emp.get("chat_id"):
            await context.bot.send_message(emp["chat_id"], text)

# üì¨ –†–∞—Å—Å—ã–ª–∫–∞ —É—Ç—Ä–æ–º
async def send_notifications(app):
    while True:
        now = datetime.now()
        current_time = now.strftime("%H:%M")

        employees = load_employees()
        for emp in employees:
            if emp["chat_id"] and emp["open_time"]:
                hour, minute = map(int, emp["open_time"].split(":"))
                notify_time = (hour * 60 + minute) - 25
                if notify_time < 0:
                    continue

                notif_hour = notify_time // 60
                notif_minute = notify_time % 60
                if current_time == f"{notif_hour:02d}:{notif_minute:02d}":
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{emp['username']}|{emp['point']}"),
                            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"no|{emp['username']}|{emp['point']}")
                        ]
                    ])
                    try:
                        await app.bot.send_message(chat_id=emp["chat_id"], text="–í—ã—Ö–æ–¥–∏—à—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–º–µ–Ω—É?", reply_markup=keyboard)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await asyncio.sleep(60)
        
# üì§ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ Webhook (–µ—Å–ª–∏ –±—ã–ª)
async def delete_webhook():
    async with httpx.AsyncClient() as client:
        await client.post(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await delete_webhook()
    
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    asyncio.create_task(send_notifications(app))
    await app.run_polling()

import nest_asyncio
nest_asyncio.apply()

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
